import { Injectable, NotFoundException } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model, Types } from 'mongoose';
import { CreateUserDto } from './dto/create-user.dto';
import { UpdateUserDto } from './dto/update-user.dto';
import { User, UserDocument } from '../schemas/user.schema';

@Injectable()
export class UsersService {
  public constructor(
    @InjectModel(User.name) private readonly userModel: Model<UserDocument>,
  ) {}

  public async findById(id: string): Promise<User> {
    const user = await this.userModel
      .findOne({ _id: new Types.ObjectId(id) })
      // .populate('accounts') // –ø–æ–≤–µ—Ä—Ç–∞—î –≤—Å—ñ –ø–æ–ª—è –∑ –æ–±'—î–∫—Ç–∞ accounts
      .exec();
    if (!user) {
      throw new NotFoundException(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID ${id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
    }
    return user;
  }

  public async findByLogin(login: string): Promise<User> {
    if (!login) {
      throw new Error('–õ–æ–≥—ñ–Ω –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º'); // –î–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Ç–æ–º
    }
    const user = await this.userModel
      .findOne({ login })
      // .populate('accounts') // –ø–æ–≤–µ—Ä—Ç–∞—î –≤—Å—ñ –ø–æ–ª—è –∑ –æ–±'—î–∫—Ç–∞ accounts
      .exec();
    if (!user) {
      throw new NotFoundException(
        `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑  –ª–æ–≥—ñ–Ω–æ–º ${login} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`,
      );
    }
    return user;
  }

  public async create(createUserDto: CreateUserDto): Promise<User> {
    const newUser = new this.userModel(createUserDto);
    return newUser.save(); // –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —é–∑–µ—Ä–∞ –≤ MongoDB
  }

  public async findAll(): Promise<User[]> {
    const result = await this.userModel
      .find({}) // –≤–∏–±–∏—Ä–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –ø–æ–ª—è
      .lean() // –±–µ–∑ –æ–±–≥–æ—Ä—Ç–∫–∏ Mongoose document
      .exec();
    console.log('üëâ Users:', result.length); // –∫—Ä–∞—â–µ –ª–æ–≥–∞—Ç–∏ –¥–æ–≤–∂–∏–Ω—É
    return result;
  }

  public async update(id: string, updateUserDto: UpdateUserDto): Promise<User> {
    const updatedUser = await this.userModel
      .findByIdAndUpdate(id, updateUserDto, {
        new: true, // –ø–æ–≤–µ—Ä—Ç–∞—î –≤–∂–µ –æ–Ω–æ–≤–ª–µ–Ω–∏–π –¥–æ–∫—É–º–µ–Ω—Ç
        runValidators: true, // –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ö–µ–º–æ—é
      })
      // .populate('accounts') // –ø–æ–≤–µ—Ä—Ç–∞—î –≤—Å—ñ –ø–æ–ª—è –∑ –æ–±'—î–∫—Ç–∞ accounts
      .exec();

    if (!updatedUser) {
      throw new NotFoundException('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è');
    }

    return updatedUser;
  }

  async remove(id: string): Promise<{ message: string }> {
    const result = await this.userModel.findByIdAndDelete(id).exec();
    if (!result) {
      throw new NotFoundException('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è');
    }
    return { message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ' };
  }

  // public async remove(id: string): Promise<void> {
  //   const result = await this.userModel.findByIdAndDelete(id).exec();
  //   if (!result) {
  //     throw new NotFoundException('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è');
  //   }
  // }
}
